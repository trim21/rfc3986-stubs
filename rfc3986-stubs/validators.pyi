from typing import Pattern, Iterable, Collection
from . import URIReference
from typing import Self, ClassVar

class Validator:
    COMPONENT_NAMES: ClassVar[frozenset[str]]
    allowed_schemes: set[str]
    allowed_hosts: set[str]
    allowed_ports: set[str]
    allow_password: bool
    required_components: dict[str, bool]
    validated_components: dict[str, bool]
    def __init__(self) -> None: ...
    def allow_schemes(self, *schemes: str) -> Self: ...
    def allow_hosts(self, *hosts: str) -> Self: ...
    def allow_ports(self, *ports: str) -> Self: ...
    def allow_use_of_password(self) -> Self: ...
    def forbid_use_of_password(self) -> Self: ...
    def check_validity_of(self, *components: str) -> Self: ...
    def require_presence_of(self, *components: str) -> Self: ...
    def validate(self, uri: URIReference) -> None: ...

def check_password(uri: URIReference) -> None: ...
def ensure_one_of(
    allowed_values: Collection[object], uri: URIReference, attribute: str
) -> None: ...
def ensure_required_components_exist(
    uri: URIReference, required_components: Iterable[str]
) -> None: ...
def is_valid(value: str | None, matcher: Pattern[str], require: bool) -> bool: ...
def authority_is_valid(
    authority: str | None, host: str | None = None, require: bool = False
) -> bool: ...
def host_is_valid(host: str | None, require: bool = False) -> bool: ...
def scheme_is_valid(scheme: str | None, require: bool = False) -> bool: ...
def path_is_valid(path: str | None, require: bool = False) -> bool: ...
def query_is_valid(query: str | None, require: bool = False) -> bool: ...
def fragment_is_valid(fragment: str | None, require: bool = False) -> bool: ...
def valid_ipv4_host_address(host: str) -> bool: ...
def subauthority_component_is_valid(uri: URIReference, component: str) -> bool: ...
def ensure_components_are_valid(
    uri: URIReference, validated_components: list[str]
) -> None: ...
