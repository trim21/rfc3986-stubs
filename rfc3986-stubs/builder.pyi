from . import uri
from typing import Mapping, List, Sequence, Any, Union, Tuple, Self

_QueryType = Union[
    Mapping[Any, Any],
    Mapping[Any, Sequence[Any]],
    List[Tuple[Any, Any]],
    List[Tuple[Any, Sequence[Any]]],
]

class URIBuilder:
    scheme: str | None
    userinfo: str | None
    host: str | None
    port: str | None
    path: str | None
    query: str | None
    fragment: str | None
    def __init__(
        self,
        scheme: str | None = None,
        userinfo: str | None = None,
        host: str | None = None,
        port: int | str | None = None,
        path: str | None = None,
        query: str | None = None,
        fragment: str | None = None,
    ) -> None: ...
    @classmethod
    def from_uri(cls, reference: uri.URIReference | str) -> Self: ...
    def add_scheme(self, scheme: str) -> URIBuilder: ...
    def add_credentials(self, username: str, password: str | None) -> URIBuilder: ...
    def add_host(self, host: str) -> URIBuilder: ...
    def add_port(self, port: int | str) -> URIBuilder: ...
    def add_path(self, path: str) -> URIBuilder: ...
    def extend_path(self, path: str) -> URIBuilder: ...
    def add_query_from(self, query_items: _QueryType) -> URIBuilder: ...
    def extend_query_with(self, query_items: _QueryType) -> URIBuilder: ...
    def add_query(self, query: str) -> URIBuilder: ...
    def add_fragment(self, fragment: str) -> URIBuilder: ...
    def finalize(self) -> uri.URIReference: ...
    def geturl(self) -> str: ...
